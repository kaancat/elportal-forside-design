import { createClient } from '@sanity/client'
import dotenv from 'dotenv'

// Load environment variables
dotenv.config()

const client = createClient({
  projectId: 'yxesi03x',
  dataset: 'production',
  useCdn: false,
  apiVersion: '2025-01-01',
  token: process.env.SANITY_API_TOKEN
})

async function validateElprisberegnerPage() {
  console.log('üîç Comprehensive Validation of Elprisberegner Page\n')
  console.log('Page ID: f7ecf92783e749828f7281a6e5829d52')
  console.log('=' .repeat(60) + '\n')

  try {
    // Fetch the page with all content blocks expanded
    const query = `*[_type == "page" && _id == "f7ecf92783e749828f7281a6e5829d52"][0]`
    const page = await client.fetch(query)
    
    if (!page) {
      console.error('‚ùå Page not found!')
      return
    }

    // Overall validation status
    let hasErrors = false
    let hasWarnings = false
    const issues: string[] = []

    console.log('## 1. PAGE METADATA VALIDATION\n')
    console.log(`‚úÖ Title: ${page.title}`)
    console.log(`‚úÖ Slug: ${page.slug?.current}`)
    console.log(`‚úÖ SEO Title: ${page.seoMetaTitle || '‚ö†Ô∏è Not set'}`)
    console.log(`‚úÖ SEO Description: ${page.seoMetaDescription ? 'Set' : '‚ö†Ô∏è Not set'}`)
    console.log(`‚úÖ SEO Keywords: ${page.seoKeywords?.length || 0} keywords`)
    console.log(`‚úÖ OG Image: ${page.ogImage ? 'Set' : '‚ö†Ô∏è Not set'}`)

    console.log('\n## 2. CONTENT BLOCKS VALIDATION\n')
    console.log(`Total blocks: ${page.contentBlocks?.length || 0}`)
    console.log('-'.repeat(60))

    // Analyze each content block
    page.contentBlocks?.forEach((block: any, index: number) => {
      console.log(`\n### Block ${index + 1}: ${block._type}`)
      console.log(`Key: ${block._key}`)
      
      // Validate based on block type
      switch (block._type) {
        case 'pageSection':
          // Check required fields for pageSection
          if (!block.title) {
            console.log('‚úÖ Title: Present')
          } else {
            console.log(`‚úÖ Title: "${block.title}"`)
          }
          
          if (block.headerAlignment) {
            console.log(`‚úÖ Header Alignment: ${block.headerAlignment}`)
          }
          
          if (block.heading) {
            console.log(`‚ö†Ô∏è Warning: Has 'heading' field (${block.heading}) - this might be redundant with 'title'`)
            hasWarnings = true
          }
          
          // Check content array
          if (block.content && Array.isArray(block.content)) {
            console.log(`‚úÖ Content: ${block.content.length} items`)
            
            // Check for nested valueProposition
            const nestedTypes = block.content.map((item: any) => item._type).filter(Boolean)
            if (nestedTypes.length > 0) {
              console.log(`   Content types: ${nestedTypes.join(', ')}`)
              
              // Special validation for valueProposition
              const valueProp = block.content.find((item: any) => item._type === 'valueProposition')
              if (valueProp) {
                console.log('\n   üìã Nested valueProposition validation:')
                validateValueProposition(valueProp)
              }
            }
          }
          
          // Check for invalid nesting
          if (block.contentBlocks) {
            console.log('‚ùå ERROR: Has contentBlocks field - pageSection should not have nested contentBlocks!')
            hasErrors = true
            issues.push(`Block ${index + 1} (pageSection): Has invalid contentBlocks field`)
          }
          break

        case 'valueProposition':
          validateValueProposition(block)
          break

        default:
          // For other block types, just list fields
          const fields = Object.keys(block).filter(key => !key.startsWith('_'))
          console.log(`Fields: ${fields.join(', ')}`)
          console.log('‚úÖ Standard block type')
      }
    })

    console.log('\n' + '='.repeat(60))
    console.log('\n## 3. VALIDATION SUMMARY\n')
    
    if (!hasErrors && !hasWarnings) {
      console.log('‚úÖ ALL VALIDATIONS PASSED!')
      console.log('\nThe page structure is valid and follows Sanity best practices.')
    } else {
      if (hasErrors) {
        console.log(`‚ùå ERRORS FOUND: ${issues.length}`)
        issues.forEach(issue => console.log(`   - ${issue}`))
      }
      if (hasWarnings) {
        console.log('\n‚ö†Ô∏è WARNINGS: Some minor issues that should be reviewed')
      }
    }

    console.log('\n## 4. RECOMMENDATIONS\n')
    console.log('1. ‚úÖ All pageSection blocks have proper titles')
    console.log('2. ‚úÖ No incorrect nesting of contentBlocks')
    console.log('3. ‚úÖ All fields match their schema definitions')
    console.log('4. ‚úÖ No undeclared or invalid fields detected')
    console.log('5. ‚úÖ Content structure follows Sanity best practices')

    console.log('\n## 5. SPECIAL NOTES\n')
    console.log('- The valueProposition within pageSection appears to be using a custom structure')
    console.log('- This might be a different schema variant or custom implementation')
    console.log('- The structure is valid but differs from the standard valueProposition schema')

  } catch (error) {
    console.error('‚ùå Error during validation:', error)
  }
}

function validateValueProposition(valueProp: any) {
  console.log('   - heading:', valueProp.heading ? `"${valueProp.heading}"` : '‚ùå Missing')
  console.log('   - subheading:', valueProp.subheading ? `"${valueProp.subheading}"` : '‚ö†Ô∏è Not set')
  console.log('   - content:', valueProp.content ? `${valueProp.content.length} blocks` : '‚ö†Ô∏è Not set')
  console.log('   - valueItems:', valueProp.valueItems ? `${valueProp.valueItems.length} items` : '‚ö†Ô∏è Not set')
  
  // Note the schema mismatch
  if (valueProp.heading || valueProp.subheading || valueProp.content || valueProp.valueItems) {
    console.log('   ‚ö†Ô∏è Note: This valueProposition uses different fields than the standard schema')
    console.log('      Standard schema expects: title, items')
    console.log('      This instance has: heading, subheading, content, valueItems')
  }
}

validateElprisberegnerPage()