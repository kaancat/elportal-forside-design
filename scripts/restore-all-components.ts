import { createClient } from '@sanity/client'
import dotenv from 'dotenv'

dotenv.config()

const client = createClient({
  projectId: process.env.VITE_SANITY_PROJECT_ID || 'yxesi03x',
  dataset: process.env.VITE_SANITY_DATASET || 'production',
  apiVersion: '2024-01-01',
  useCdn: false,
  token: process.env.SANITY_API_TOKEN
})

// Helper to create text blocks
const createTextBlock = (text: string, style: string = 'normal') => ({
  _type: 'block',
  _key: Math.random().toString(36).substring(7),
  style,
  markDefs: [],
  children: [
    {
      _type: 'span',
      _key: Math.random().toString(36).substring(7),
      text,
      marks: [],
    },
  ],
})

async function restoreAllComponents() {
  console.log('üöÄ Final restoration of ALL new components...\n')
  
  const pageId = 'qgCxJyBbKpvhb2oGYjlhjr'
  
  // Fetch current page and log what we have
  const currentPage = await client.fetch(`*[_id == "${pageId}"][0]`)
  
  if (!currentPage) {
    console.log('‚ùå Page not found!')
    return
  }
  
  console.log('‚úÖ Found page:', currentPage.title)
  console.log('üìä Total blocks:', currentPage.contentBlocks?.length || 0)
  
  // Log what needs to be converted
  let toConvert = []
  currentPage.contentBlocks.forEach((block: any, index: number) => {
    if (block._type === 'pageSection') {
      if (block.title?.includes('DK1') || block.title?.includes('Regional')) {
        toConvert.push({ index, type: 'regional', title: block.title })
      } else if (block.title?.includes('Fast vs') || block.title?.includes('pris')) {
        toConvert.push({ index, type: 'pricing', title: block.title })
      } else if (block.title?.includes('Hvorn√•r')) {
        toConvert.push({ index, type: 'timeline', title: block.title })
      }
    }
  })
  
  console.log('\nüìã Components to restore:', toConvert.length)
  toConvert.forEach(item => {
    console.log(`   - Block ${item.index + 1}: ${item.title} ‚Üí ${item.type}`)
  })
  
  // Now let's find the exact indices and restore them
  const restoredBlocks = [...currentPage.contentBlocks]
  
  // Find and restore regional comparison
  const regionalIndex = currentPage.contentBlocks.findIndex((block: any) => 
    block._type === 'pageSection' && 
    block.content?.some((c: any) => c.children?.[0]?.text?.includes('DK1 (Vestdanmark'))
  )
  
  if (regionalIndex !== -1) {
    console.log(`\n‚úì Restoring regionalComparison at index ${regionalIndex + 1}`)
    restoredBlocks[regionalIndex] = {
      _type: 'regionalComparison',
      _key: restoredBlocks[regionalIndex]._key,
      title: 'DK1 vs DK2: Regionale Forskelle',
      subtitle: 'Danmark har to separate elprisomr√•der med ofte betydelige prisforskelle',
      headerAlignment: 'left',
      leadingText: [
        createTextBlock('Danmark er opdelt i to elprisomr√•der, som handles separat p√• elb√∏rsen. Dette skaber ofte betydelige prisforskelle mellem landsdelene.')
      ],
      dk1Title: 'DK1 - Vestdanmark',
      dk1Description: [
        createTextBlock('70% af Danmarks vindm√∏ller st√•r i DK1, hvilket giver gennemsnitligt 5-15% lavere priser end DK2. Omr√•det har direkte forbindelse til Tyskland og Norge samt bedre mulighed for eksport ved overproduktion.')
      ],
      dk1PriceIndicator: 'lower',
      dk1Features: ['Jylland', 'Fyn', 'Bornholm'],
      dk2Title: 'DK2 - √òstdanmark',
      dk2Description: [
        createTextBlock('T√¶t koblet til Sverige via √òresundskablet og p√•virkes af svensk vandkraft og atomkraft. H√∏jere priser ved lav vandstand i Sverige og st√∏rre prisudsving ved ekstreme vejrforhold.')
      ],
      dk2PriceIndicator: 'higher',
      dk2Features: ['Sj√¶lland', 'Lolland-Falster', 'M√∏n'],
      showMap: true
    }
  }
  
  // Find and restore pricing comparison
  const pricingIndex = currentPage.contentBlocks.findIndex((block: any) => 
    block._type === 'pageSection' && 
    block.content?.some((c: any) => c.children?.[0]?.text?.includes('Fast pris - Fordele'))
  )
  
  if (pricingIndex !== -1) {
    console.log(`‚úì Restoring pricingComparison at index ${pricingIndex + 1}`)
    restoredBlocks[pricingIndex] = {
      _type: 'pricingComparison',
      _key: restoredBlocks[pricingIndex]._key,
      title: 'Fast vs Variabel Pris: Hvad Passer Bedst til Dig?',
      subtitle: 'Sammenlign fordele og ulemper ved forskellige prismodeller',
      headerAlignment: 'left',
      leadingText: [
        createTextBlock('Valget mellem fast og variabel elpris er en af de vigtigste beslutninger for din elregning. Her er en omfattende sammenligning:')
      ],
      fixedPriceTitle: 'Fast Pris',
      fixedPriceDescription: [
        createTextBlock('Med fast pris betaler du samme pris per kWh i hele aftaleperioden, uanset markedspriserne.')
      ],
      fixedPriceAdvantages: [
        'Forudsigelige elregninger hver m√•ned',
        'Beskyttelse mod prisstigninger',
        'Nem budgettering',
        'Ro i sindet'
      ],
      fixedPriceDisadvantages: [
        'Typisk 20-30% dyrere end variabel',
        'G√•r glip af lave priser',
        'Bindingsperioder',
        'Ingen fordel af gr√∏n omstilling'
      ],
      variablePriceTitle: 'Variabel Pris',
      variablePriceDescription: [
        createTextBlock('Variabel pris f√∏lger elmarkedets spotpriser time for time plus dit elselskabs till√¶g.')
      ],
      variablePriceAdvantages: [
        'F√∏lger markedspriserne direkte',
        'Billigst over tid (historisk 25-35% billigere)',
        'Ingen binding',
        'Udnyt negative priser'
      ],
      variablePriceDisadvantages: [
        'M√•nedlige udsving',
        'Kr√¶ver st√∏rre √∏konomisk buffer',
        'H√∏jere priser om vinteren',
        'Mindre forudsigelighed'
      ],
      showComparisonTable: true,
      recommendation: [
        createTextBlock('For de fleste husstande vil variabel pris v√¶re det mest fordelagtige valg, is√¶r hvis du kan flytte noget af dit forbrug til billige timer.')
      ]
    }
  }
  
  // Find and restore daily timeline
  const timelineIndex = currentPage.contentBlocks.findIndex((block: any) => 
    block._type === 'pageSection' && 
    block.content?.some((c: any) => c.children?.[0]?.text?.includes('Nat (00:00-06:00)'))
  )
  
  if (timelineIndex !== -1) {
    console.log(`‚úì Restoring dailyPriceTimeline at index ${timelineIndex + 1}`)
    restoredBlocks[timelineIndex] = {
      _type: 'dailyPriceTimeline',
      _key: restoredBlocks[timelineIndex]._key,
      title: 'Hvorn√•r p√• Dagen er Str√∏m Billigst?',
      subtitle: 'Udnyt d√∏gnets prisvariationer til at spare penge',
      headerAlignment: 'left',
      description: [
        createTextBlock('Elpriserne varierer betydeligt gennem d√∏gnet. Ved at flytte dit forbrug til de billige timer kan du spare 20-40% p√• din elregning.')
      ],
      timeSlots: [
        {
          _type: 'timeSlot',
          _key: 'night',
          period: 'Nat',
          hours: '00:00 - 06:00',
          priceLevel: 'lowest',
          description: 'Lavest forbrug og ofte god vindproduktion',
          tips: ['Oplad elbil', 'K√∏r vaskemaskine', 'Varmepumpe p√• lager']
        },
        {
          _type: 'timeSlot',
          _key: 'morning',
          period: 'Morgen',
          hours: '06:00 - 09:00',
          priceLevel: 'rising',
          description: 'Stigende forbrug n√•r folk v√•gner',
          tips: ['Undg√• elkedel', 'Udskyd opvaskemaskine', 'Bad f√∏r kl. 6']
        },
        {
          _type: 'timeSlot',
          _key: 'day',
          period: 'Dag',
          hours: '09:00 - 17:00',
          priceLevel: 'moderate',
          description: 'Solcelleproduktion holder priserne nede',
          tips: ['God tid til forbrug', 'Udnyt solenergi', 'Elbil-opladning OK']
        },
        {
          _type: 'timeSlot',
          _key: 'evening',
          period: 'Aften',
          hours: '17:00 - 22:00',
          priceLevel: 'highest',
          description: 'H√∏jeste forbrug n√•r alle er hjemme',
          tips: ['Minim√©r elforbrug', 'Vent med vask', 'Undg√• madlavning med el']
        }
      ],
      showChart: true,
      averageSavingsPotential: '20-40%'
    }
  }
  
  // Update the page
  try {
    console.log('\nüíæ Saving all restored components...')
    
    await client
      .patch(pageId)
      .set({ contentBlocks: restoredBlocks })
      .commit()
    
    console.log('\n‚úÖ Successfully restored ALL visual components!')
    console.log('\nüéâ The historiske-priser page now uses:')
    console.log('   - regionalComparison ‚Üí Visual DK1/DK2 comparison')
    console.log('   - pricingComparison ‚Üí Side-by-side pricing model comparison')
    console.log('   - dailyPriceTimeline ‚Üí Interactive daily price visualization')
    console.log('\nüöÄ All components are properly deployed and active!')
    
  } catch (error) {
    console.error('\n‚ùå Error:', error)
  }
}

restoreAllComponents().catch(console.error)